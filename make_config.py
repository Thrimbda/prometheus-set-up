#!/usr/bin/env -S python3
'''
script for map prometheus config to k8s configMap.
'''
from __future__ import annotations

import argparse
import sys
import yaml
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, Iterable, List


@dataclass
class ConfigmapData(object):
    name: str
    namespace: str
    labels: Dict[str, str]
    file_name: str
    file_path: Path = field(init=False)
    file_content: str = field(init=False)

    def __post_init__(self):
        self.file_path = Path(self.file_name)

        with self.file_path.open('r') as conf_file:
            conf_lines = conf_file.readlines()

        indentation = ' ' * 4

        self.file_content = ''.join(
            f'{indentation}{line}' if line.strip() else '\n'
            for line in conf_lines
        )

    def make_config(self) -> str:
        newline = '\n'
        return f"""# generated by make_config.py DON'T EDIT THIS FILE.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {self.name}
  namespace: {self.namespace}
  labels:
    {newline.join(f'{k}: {v}' for k, v in self.labels.items())}
data:
  {self.file_path.name}: |
{self.file_content}
"""


def arg_parser(args: List[str]) -> argparse.Namespace:
    """
    CLI argument parser
    """
    parser = argparse.ArgumentParser(description='This is a script mapping config file to K8s configMap',
                                     prog='configMap maker',
                                     epilog='enjoy')

    parser.add_argument('conf',
                        metavar='<config_meta_path>')
    parser.add_argument('configmap',
                        metavar='<k8s_configmap_path>')

    return parser.parse_args(args)


def main() -> None:
    '''
    main ctl function
    '''
    args: argparse.Namespace = arg_parser(sys.argv[1:])
    conf_meta_path = Path(args.conf)
    configmap_path = Path(args.configmap)

    try:
        with conf_meta_path.open('r') as conf_meta_file:
            raw = yaml.load(conf_meta_file.read(), Loader=yaml.BaseLoader)
        conf_data = ConfigmapData(**raw)
    except TypeError as exc:
        print(f'corrupt format of config meta file {exc}')
        exit(1)

    configmap = conf_data.make_config()

    with configmap_path.open('w') as configmap_file:
        configmap_file.write(configmap)


if __name__ == '__main__':
    main()
