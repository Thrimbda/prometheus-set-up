#!/usr/bin/env -S python3
'''
script for map prometheus config to k8s configMap.
'''
from __future__ import annotations

import argparse
import sys
import yaml
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, Iterable, List


@dataclass
class File:
    name: str
    path: Path
    content: str

    def __init__(self, str_path: str) -> None:
        self.path = Path(str_path)
        self.name = self.path.name

        with self.path.open('r') as conf_file:
            conf_lines = conf_file.readlines()

        indentation = ' ' * 4

        self.content = ''.join(
            f'{indentation}{line}' if line.strip() else '\n'
            for line in conf_lines
        )


@dataclass
class ConfigmapData:
    name: str
    namespace: str
    labels: Dict[str, str]
    files: List[File]

    def __init__(self, name: str, namespace: str, labels: Dict[str, str], file_paths: List[str]) -> None:
        self.name = name
        self.namespace = namespace
        self.labels = labels
        self.files = [File(str_path) for str_path in file_paths]

    def make_config(self) -> str:
        labels = '\n'.join(f'{k}: {v}' for k, v in self.labels.items())
        files = '\n'.join(f"""  {file.name}: |
{file.content}""" for file in self.files)

        return f"""# generated by make_config.py DON'T EDIT THIS FILE.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {self.name}
  namespace: {self.namespace}
  labels:
    {labels}
data:
{files}
"""


def arg_parser(args: List[str]) -> argparse.Namespace:
    """
    CLI argument parser
    """
    parser = argparse.ArgumentParser(description='This is a script mapping config file to K8s configMap',
                                     prog='configMap maker',
                                     epilog='enjoy')

    parser.add_argument('conf',
                        metavar='<config_meta_path>')
    parser.add_argument('configmap',
                        metavar='<k8s_configmap_path>')

    return parser.parse_args(args)


def main() -> None:
    '''
    main ctl function
    '''
    args: argparse.Namespace = arg_parser(sys.argv[1:])
    conf_meta_path = Path(args.conf)
    configmap_path = Path(args.configmap)

    try:
        with conf_meta_path.open('r') as conf_meta_file:
            raw = yaml.load(conf_meta_file.read(), Loader=yaml.BaseLoader)
        conf_data = ConfigmapData(**raw)
    except TypeError as exc:
        print(f'corrupt format of config meta file {exc}')
        exit(1)

    configmap = conf_data.make_config()

    with configmap_path.open('w') as configmap_file:
        configmap_file.write(configmap)


if __name__ == '__main__':
    main()
